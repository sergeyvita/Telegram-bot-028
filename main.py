import os
import asyncio
from aiohttp import web
from dotenv import load_dotenv
import openai
import aiohttp
from pydub import AudioSegment
from asyncio import Event

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
OPENAI_API_KEY = os.getenv('OPENAI_API_KEY')
WEBHOOK_URL = os.getenv('WEBHOOK_URL')

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ API-–∫–ª—é—á–∞ OpenAI
openai.api_key = OPENAI_API_KEY

# PROMPT –¥–ª—è OpenAI
PROMPT = (
    "–≠—Ç–æ—Ç GPT –≤—ã—Å—Ç—É–ø–∞–µ—Ç –≤ —Ä–æ–ª–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–∑–¥–∞—Ç–µ–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –¢–µ–ª–µ–≥—Ä–∞–º-–∫–∞–Ω–∞–ª–∞ –ê—Å—Å–æ—Ü–∏–∞—Ü–∏–∏ –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–æ–≤. "
    "–û–Ω —Å–æ–∑–¥–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø—Ä–æ–¥–∞—é—â–∏–µ –ø–æ—Å—Ç—ã –Ω–∞ —Ç–µ–º—ã –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏, —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞, –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–∞, –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π –∏ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –æ—Ç—Ä–∞—Å–ª–µ–π. "
    "–ö–æ–Ω—Ç–µ–Ω—Ç –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω –Ω–∞ –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏–µ –≤–Ω–∏–º–∞–Ω–∏—è, —É–¥–µ—Ä–∂–∞–Ω–∏–µ –∞—É–¥–∏—Ç–æ—Ä–∏–∏ –∏ —Å—Ç–∏–º—É–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ–±—Ä–∞—â–µ–Ω–∏—è –∑–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–µ–π –∏–ª–∏ –ø–æ–∫—É–ø–∫–∏). "
    "–ü–æ—Å—Ç—ã –∫—Ä–∞—Å–∏–≤–æ –æ—Ñ–æ—Ä–º–ª—è—é—Ç—Å—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —ç–º–æ–¥–∑–∏ –≤ —Å—Ç–∏–ª–µ \"—ç–Ω–µ—Ä–≥–∏—á–Ω—ã–π –∏ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π\", –¥–æ–±–∞–≤–ª—è—è –¥–∏–Ω–∞–º–∏—á–Ω–æ—Å—Ç–∏ –∏ –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç–∏. "
    "–ù–∞–ø—Ä–∏–º–µ—Ä: üè† –¥–ª—è —Ç–µ–º—ã –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏, üöÄ –¥–ª—è —Ä–æ—Å—Ç–∞, üì¢ –¥–ª—è –Ω–æ–≤–æ—Å—Ç–µ–π. "
    "–í—Å–µ –ø–æ—Å—Ç—ã —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç —á–µ—Ç–∫–∏–µ –ø—Ä–∏–∑—ã–≤—ã –∫ –¥–µ–π—Å—Ç–≤–∏—é, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Ç–∞–∫—Ç–∞—Ö –∏ –≥–∏–ø–µ—Ä—Å—Å—ã–ª–∫–∏. "
    "–í –∫–æ–Ω—Ü–µ –∫–∞–∂–¥–æ–≥–æ –ø–æ—Å—Ç–∞ –ø–µ—Ä–µ–¥ —Ö—ç—à—Ç–µ–≥–∞–º–∏ —É–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ \"–ê—Å—Å–æ—Ü–∏–∞—Ü–∏—è –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–æ–≤\", –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ 8-800-550-23-93. "
    "–í –∫–æ–Ω—Ü–µ —Ö—ç—à—Ç–µ–≥–∏ –Ω–∞ —Ç–µ–º—É –ø–æ—Å—Ç–∞."
)

# –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Aiohttp
app = web.Application()

async def handle_home(request):
    return web.Response(text="–°–µ—Ä–≤–∏—Å —Ä–∞–±–æ—Ç–∞–µ—Ç!")

async def handle_webhook(request):
    try:
        data = await request.json()
        print(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ—Ç Telegram: {data}")

        if "message" in data:
            chat_id = data["message"]["chat"]["id"]

            if "voice" in data["message"]:
                file_id = data["message"]["voice"]["file_id"]
                file_path = await get_file_path(file_id)

                if file_path:
                    audio_content = await download_file(file_path)
                    transcript = await process_audio(audio_content)

                    if transcript:
                        response = await generate_openai_response(transcript)
                    else:
                        response = "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."

                    await send_message(chat_id, response)

            elif "text" in data["message"]:
                user_message = data["message"]["text"]
                username = data["message"]["from"].get("username", "")

                stop_event = Event()
                typing_task = asyncio.create_task(send_typing_action_while_processing(chat_id, stop_event))

                try:
                    # –£—Å–ª–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                    if username == "di_agent01":
                        response = await generate_openai_response(user_message)
                        response += "\n–ù–∞–ø–∏—Å–∞—Ç—å –≤ WhatsApp: wa.me/79281497703"
                    elif username == "Alinalyusaya":
                        response = await generate_openai_response(user_message)
                        response += "\n–ù–∞–ø–∏—Å–∞—Ç—å –≤ WhatsApp: wa.me/79281237003"
                    elif username == "ElenaZelenskaya1":
                        response = await generate_openai_response(user_message)
                        response += "\n–ù–∞–ø–∏—Å–∞—Ç—å –≤ WhatsApp: wa.me/79384242393"
                    elif username == "uliya_az":
                        response = await generate_openai_response(user_message)
                        response += "\n–ù–∞–ø–∏—Å–∞—Ç—å –≤ WhatsApp: wa.me/79001883558"
                    elif username == "alexey_turskiy":
                        response = await generate_openai_response(user_message)
                        response += "\n–ù–∞–ø–∏—Å–∞—Ç—å –≤ WhatsApp: wa.me/9281419636"
                    else:
                        response = await generate_openai_response(user_message)

                    await send_message(chat_id, response)
                finally:
                    stop_event.set()
                    await typing_task

        return web.json_response({"status": "ok"})
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ–±—Ö—É–∫–∞: {e}")
        return web.json_response({"error": str(e)}, status=500)

async def get_file_path(file_id):
    try:
        url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/getFile?file_id={file_id}"
        async with aiohttp.ClientSession() as session:
            async with session.get(url) as response:
                result = await response.json()
                print(f"–û—Ç–≤–µ—Ç Telegram API –¥–ª—è getFile: {result}")
                return result['result']['file_path']
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—É—Ç–∏ —Ñ–∞–π–ª–∞: {e}")
        return None

async def download_file(file_path):
    try:
        file_url = f"https://api.telegram.org/file/bot{TELEGRAM_BOT_TOKEN}/{file_path}"
        async with aiohttp.ClientSession() as session:
            async with session.get(file_url) as response:
                return await response.read()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
        return None

async def process_audio(audio_content):
    try:
        temp_file = "temp_audio.ogg"
        with open(temp_file, "wb") as f:
            f.write(audio_content)

        audio = AudioSegment.from_file(temp_file, format="ogg")
        wav_file = "temp_audio.wav"
        audio.export(wav_file, format="wav")

        transcript = "–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–æ."
        return transcript
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—É–¥–∏–æ: {e}")
        return None
    finally:
        if os.path.exists(temp_file):
            os.remove(temp_file)
        if os.path.exists(wav_file):
            os.remove(wav_file)

async def send_message(chat_id, text):
    try:
        url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
        payload = {"chat_id": chat_id, "text": text}
        async with aiohttp.ClientSession() as session:
            async with session.post(url, json=payload) as response:
                result = await response.json()
                print(f"–û—Ç–≤–µ—Ç Telegram API: {result}")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

async def send_typing_action_while_processing(chat_id, stop_event):
    try:
        url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendChatAction"
        payload = {"chat_id": chat_id, "action": "typing"}
        async with aiohttp.ClientSession() as session:
            while not stop_event.is_set():
                async with session.post(url, json=payload) as response:
                    await asyncio.sleep(5)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ send_typing_action_while_processing: {e}")

async def generate_openai_response(user_message):
    try:
        response = await openai.ChatCompletion.acreate(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": PROMPT},
                {"role": "user", "content": user_message},
            ],
            temperature=1,
            max_tokens=1500,
        )
        return response['choices'][0]['message']['content']
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ OpenAI: {e}")
        return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞."

# –†–æ—É—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app.router.add_get('/', handle_home)
app.router.add_post('/webhook', handle_webhook)

if __name__ == "__main__":
    port = int(os.getenv("PORT", 8080))
    web.run_app(app, host="0.0.0.0", port=port)
