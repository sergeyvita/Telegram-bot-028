import os
import asyncio
from aiohttp import web
from dotenv import load_dotenv
import openai
import aiohttp
from pydub import AudioSegment
from asyncio import Event

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
OPENAI_API_KEY = os.getenv('OPENAI_API_KEY')
WEBHOOK_URL = os.getenv('WEBHOOK_URL')

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ API-–∫–ª—é—á–∞ OpenAI
openai.api_key = OPENAI_API_KEY

# PROMPT –¥–ª—è OpenAI
PROMPT = (
    "–≠—Ç–æ—Ç GPT —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è Telegram-–∫–∞–Ω–∞–ª–∞ –∞–≥–µ–Ω—Ç—Å—Ç–≤–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –ê—Å—Å–æ—Ü–∏–∞—Ü–∏—è –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–æ–≤. "
    "–û–Ω –ø–∏—à–µ—Ç —è—Ä–∫–∏–µ, –ø—Ä–æ–¥–∞—é—â–∏–µ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã, –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞ –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏–µ –≤–Ω–∏–º–∞–Ω–∏—è –∏ –∏–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏. "
    "–ö–∞–∂–¥—ã–π –ø–æ—Å—Ç –¥–æ–ª–∂–µ–Ω –≤–∫–ª—é—á–∞—Ç—å: "
    "1. **–Ø—Ä–∫–∏–π –∏ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫**, –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—ã–π —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —ç–º–æ–¥–∑–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, üè† –¥–ª—è –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏, üéâ –¥–ª—è –∞–∫—Ü–∏–π, üí∞ –¥–ª—è —Å–∫–∏–¥–æ–∫). "
    "2. –ü—Ä–æ–¥–∞—é—â–∏–π —Ç–µ–∫—Å—Ç, –Ω–∞—á–∏–Ω–∞—é—â–∏–π—Å—è —Å –æ–±—â–µ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏ –ø–µ—Ä–µ—Ö–æ–¥—è—â–∏–π –∫ —Å–ø–∏—Å–∫—É –∫–ª—é—á–µ–≤—ã—Ö –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤ –æ–±—ä–µ–∫—Ç–∞ –∏–ª–∏ —É—Å–ª—É–≥–∏, –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—ã–π —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —ç–º–æ–¥–∑–∏. "
    "3. –ï—Å–ª–∏ —É–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è —Ü–µ–Ω–∞ –∫–≤–∞—Ä—Ç–∏—Ä, —Ç–æ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–∞–∑–¥–µ–ª —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ü–µ–Ω–∞—Ö, –ø–ª–æ—â–∞–¥—è—Ö –∏ —É—Å–ª–æ–≤–∏—è—Ö –ø–æ–∫—É–ø–∫–∏, –≥–¥–µ –∫–∞–∂–¥–∞—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ –≤—ã–¥–µ–ª–µ–Ω–∞ **–∂–∏—Ä–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º** –∏ –≤—ã–Ω–µ—Å–µ–Ω–∞ –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—É—é —Å—Ç—Ä–æ–∫—É, –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—ã–π —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —ç–º–æ–¥–∑–∏. "
    "4. –ù–µ–Ω–∞–≤—è–∑—á–∏–≤—ã–µ, –Ω–æ –º–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–µ –ø—Ä–∏–∑—ã–≤—ã –∫ –¥–µ–π—Å—Ç–≤–∏—é: –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é, —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –∏–ª–∏ –ø–æ–∑–≤–æ–Ω–∏—Ç—å, –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—ã–π —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —ç–º–æ–¥–∑–∏. "
    "5. –ü—Ä–µ–¥–ø–æ—Å–ª–µ–¥–Ω–∏–π –±–ª–æ–∫ - –∫–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: –∏–º—è –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–≥–æ –ª–∏—Ü–∞, –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π –∫ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∏ –æ–±—â–∏–π —Ç–µ–ª–µ—Ñ–æ–Ω –∫–æ–º–ø–∞–Ω–∏–∏ **8-800-550-23-93**. "
    "6. –ó–∞–≤–µ—Ä—à–∞—é—â–∏–π –±–ª–æ–∫ —Å —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ —Ö—ç—à—Ç–µ–≥–∞–º–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–º–∏ —Å –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å—é, –∞–∫—Ü–∏—è–º–∏ –∏–ª–∏ –ª–æ–∫–∞—Ü–∏–µ–π. "
    "–¢–æ–Ω —Ç–µ–∫—Å—Ç–æ–≤ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º, —ç–Ω–µ—Ä–≥–∏—á–Ω—ã–º –∏ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º. –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç–∫–ª–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —ç–º–æ–¥–∑–∏ –∏ –∫—Ä–∞—Ç–∫–∏–µ –≤–æ—Å–∫–ª–∏—Ü–∞–Ω–∏—è. –ö–∞–∂–¥–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è –ª—ë–≥–∫–æ—Å—Ç–∏ –≤–æ—Å–ø—Ä–∏—è—Ç–∏—è."
)

# –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
USER_CONTACTS = {
    "di_agent01": {"name": "–î–∏–∞–Ω–∞", "phone": "+79281497703"},
    "Alinalyusaya": {"name": "–ê–ª–∏–Ω–∞", "phone": "+79281237003"},
    "ElenaZelenskaya1": {"name": "–ï–ª–µ–Ω–∞", "phone": "+79384242393"},
    "shaglin": {"name": "–°–µ—Ä–≥–µ–π", "phone": "+79286226009"},
    "uliya_az": {"name": "–Æ–ª–∏—è", "phone": "+79001883558"},
    "alexey_turskiy": {"name": "–ê–ª–µ–∫—Å–µ–π", "phone": "+79281419636"},
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
def get_contact_info(username):
    contact = USER_CONTACTS.get(username, None)
    if contact:
        return f"–ö–æ–Ω—Ç–∞–∫—Ç–Ω–æ–µ –ª–∏—Ü–æ: {contact['name']}.\n–¢–µ–ª–µ—Ñ–æ–Ω: {contact['phone']}."
    return "–ö–æ–Ω—Ç–∞–∫—Ç—ã –Ω–µ —É–∫–∞–∑–∞–Ω—ã."

# –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Aiohttp
app = web.Application()

async def handle_home(request):
    return web.Response(text="–°–µ—Ä–≤–∏—Å —Ä–∞–±–æ—Ç–∞–µ—Ç!")

async def handle_webhook(request):
    try:
        data = await request.json()
        print(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ—Ç Telegram: {data}")

        if "message" in data:
            chat_id = data["message"]["chat"]["id"]

            if "voice" in data["message"]:
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                file_id = data["message"]["voice"]["file_id"]
                file_path = await get_file_path(file_id)

                if file_path:
                    audio_content = await download_file(file_path)
                    transcript = await process_audio(audio_content)

                    if transcript:
                        response = await generate_openai_response(transcript)
                    else:
                        response = "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."

                    await send_message(chat_id, response)

            elif "text" in data["message"]:
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                user_message = data["message"]["text"]
                username = data["message"]["from"].get("username", "")

                stop_event = Event()
                typing_task = asyncio.create_task(send_typing_action_while_processing(chat_id, stop_event))

                try:
                    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–≤—è–∑–∞–Ω–æ —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º –ø–æ—Å—Ç–∞
                    if any(keyword in user_message.lower() for keyword in ["–ø–æ—Å—Ç", "—Å–æ–∑–¥–∞—Ç—å", "–æ–ø–∏—Å–∞–Ω–∏–µ", "–∂–∫"]):
                        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –ø–æ—Å—Ç–∞
                        post_text = await generate_openai_response(user_message)

                        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
                        contact_info = get_contact_info(username)
                        post_text += f"\n\nüìû {contact_info}\n–û–±—â–∏–π —Ç–µ–ª–µ—Ñ–æ–Ω –∫–æ–º–ø–∞–Ω–∏–∏: **8-800-550-23-93**"

                        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                        image_prompt = f"A modern apartment complex, beautiful architecture: {user_message}"
                        image_url = await generate_image(image_prompt)

                        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ –ø–æ—Å—Ç–∞
                        await send_message(chat_id, post_text)

                        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                        if image_url:
                            await send_image(chat_id, image_url)
                        else:
                            await send_message(chat_id, "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")
                    else:
                        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                        response = await generate_openai_response(user_message)
                        await send_message(chat_id, response)
                finally:
                    stop_event.set()
                    await typing_task

        return web.json_response({"status": "ok"})
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ–±—Ö—É–∫–∞: {e}")
        return web.json_response({"error": str(e)}, status=500)

async def get_file_path(file_id):
    try:
        url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/getFile?file_id={file_id}"
        async with aiohttp.ClientSession() as session:
            async with session.get(url) as response:
                result = await response.json()
                print(f"–û—Ç–≤–µ—Ç Telegram API –¥–ª—è getFile: {result}")
                return result['result']['file_path']
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—É—Ç–∏ —Ñ–∞–π–ª–∞: {e}")
        return None

async def download_file(file_path):
    try:
        file_url = f"https://api.telegram.org/file/bot{TELEGRAM_BOT_TOKEN}/{file_path}"
        async with aiohttp.ClientSession() as session:
            async with session.get(file_url) as response:
                return await response.read()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
        return None

async def process_audio(audio_content):
    try:
        temp_file = "temp_audio.ogg"
        with open(temp_file, "wb") as f:
            f.write(audio_content)

        audio = AudioSegment.from_file(temp_file, format="ogg")
        wav_file = "temp_audio.wav"
        audio.export(wav_file, format="wav")

        transcript = "–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–æ."
        return transcript
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—É–¥–∏–æ: {e}")
        return None
    finally:
        if os.path.exists(temp_file):
            os.remove(temp_file)
        if os.path.exists(wav_file):
            os.remove(wav_file)

async def send_message(chat_id, text):
    try:
        url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
        payload = {"chat_id": chat_id, "text": text}
        async with aiohttp.ClientSession() as session:
            async with session.post(url, json=payload) as response:
                result = await response.json()
                print(f"–û—Ç–≤–µ—Ç Telegram API: {result}")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

async def send_image(chat_id, image_url):
    try:
        url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendPhoto"
        payload = {"chat_id": chat_id, "photo": image_url}
        async with aiohttp.ClientSession() as session:
            async with session.post(url, json=payload) as response:
                result = await response.json()
                print(f"–û—Ç–≤–µ—Ç Telegram API (—Ñ–æ—Ç–æ): {result}")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")

async def send_typing_action_while_processing(chat_id, stop_event):
    try:
        url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendChatAction"
        payload = {"chat_id": chat_id, "action": "typing"}
        async with aiohttp.ClientSession() as session:
            while not stop_event.is_set():
                async with session.post(url, json=payload) as response:
                    await asyncio.sleep(5)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ send_typing_action_while_processing: {e}")

async def generate_openai_response(user_message):
    try:
        response = await openai.ChatCompletion.acreate(
            model="gpt-4",
            messages=[
                {"role": "system", "content": PROMPT},
                {"role": "user", "content": user_message},
            ],
            temperature=1,
            max_tokens=1500,
        )
        return response['choices'][0]['message']['content']
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ OpenAI: {e}")
        return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞."

async def generate_image(prompt):
    try:
        short_prompt = (prompt[:200] + '...') if len(prompt) > 200 else prompt
        response = await openai.Image.acreate(
            prompt=short_prompt,
            n=1,
            size="512x512"
        )
        return response['data'][0]['url']
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        return None

# –†–æ—É—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app.router.add_get('/', handle_home)
app.router.add_post('/webhook', handle_webhook)

if __name__ == "__main__":
    port = int(os.getenv("PORT", 8080))
    web.run_app(app, host="0.0.0.0", port=port)
